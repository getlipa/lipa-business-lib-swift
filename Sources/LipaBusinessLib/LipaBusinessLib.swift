// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(lipabusinesslibFFI)
import lipabusinesslibFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_lipabusinesslib_c8c2_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_lipabusinesslib_c8c2_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
fileprivate class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        self.offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset..<offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value, { data.copyBytes(to: $0, from: range)})
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> Array<UInt8> {
        let range = offset..<(offset+count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer({ buffer in
            data.copyBytes(to: buffer, from: range)
        })
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
fileprivate class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        self.bytes = []
        self.offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
          let writer = Writer()
          write(value, into: writer)
          return RustBuffer(bytes: writer.bytes)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    static func read(from buf: Reader) throws -> UInt8 {
        return try lift(buf.readInt())
    }

    static func write(_ value: UInt8, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    static func read(from buf: Reader) throws -> UInt32 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    static func read(from buf: Reader) throws -> UInt64 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}

fileprivate struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    static func read(from buf: Reader) throws -> Date {
        let seconds: Int64 = try buf.readInt()
        let nanoseconds: UInt32 = try buf.readInt()
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        }
    }

    static func write(_ value: Date, into buf: Writer) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        buf.writeInt(sign * seconds)
        buf.writeInt(nanoseconds)
    }
}


public protocol WalletProtocol {
    func `sync`() throws
    func `syncBalance`() throws -> Balance
    func `getAddr`() throws -> String
    func `validateAddr`(`addr`: String)  -> AddressValidationResult
    func `prepareDrainTx`(`addr`: String, `confirmInBlocks`: UInt32) throws -> Tx
    func `signAndBroadcastTx`(`txBlob`: [UInt8], `spendDescriptor`: String) throws -> TxDetails
    func `getTxStatus`(`txid`: String) throws -> TxStatus
    func `getSpendingTxs`() throws -> [TxDetails]
    func `isDrainTxAffordable`(`confirmInBlocks`: UInt32) throws -> Bool
    
}

public class Wallet: WalletProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`config`: Config) throws {
        self.init(unsafeFromRawPointer: try
    
    rustCallWithError(FfiConverterTypeLipaError.self) {
    
    lipabusinesslib_c8c2_Wallet_new(
        FfiConverterTypeConfig.lower(`config`), $0)
})
    }

    deinit {
        try! rustCall { ffi_lipabusinesslib_c8c2_Wallet_object_free(pointer, $0) }
    }

    

    
    public func `sync`() throws {
        try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_sync(self.pointer, $0
    )
}
    }
    public func `syncBalance`() throws -> Balance {
        return try FfiConverterTypeBalance.lift(
            try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_sync_balance(self.pointer, $0
    )
}
        )
    }
    public func `getAddr`() throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_get_addr(self.pointer, $0
    )
}
        )
    }
    public func `validateAddr`(`addr`: String)  -> AddressValidationResult {
        return try! FfiConverterTypeAddressValidationResult.lift(
            try!
    rustCall() {
    
    lipabusinesslib_c8c2_Wallet_validate_addr(self.pointer, 
        FfiConverterString.lower(`addr`), $0
    )
}
        )
    }
    public func `prepareDrainTx`(`addr`: String, `confirmInBlocks`: UInt32) throws -> Tx {
        return try FfiConverterTypeTx.lift(
            try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_prepare_drain_tx(self.pointer, 
        FfiConverterString.lower(`addr`), 
        FfiConverterUInt32.lower(`confirmInBlocks`), $0
    )
}
        )
    }
    public func `signAndBroadcastTx`(`txBlob`: [UInt8], `spendDescriptor`: String) throws -> TxDetails {
        return try FfiConverterTypeTxDetails.lift(
            try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_sign_and_broadcast_tx(self.pointer, 
        FfiConverterSequenceUInt8.lower(`txBlob`), 
        FfiConverterString.lower(`spendDescriptor`), $0
    )
}
        )
    }
    public func `getTxStatus`(`txid`: String) throws -> TxStatus {
        return try FfiConverterTypeTxStatus.lift(
            try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_get_tx_status(self.pointer, 
        FfiConverterString.lower(`txid`), $0
    )
}
        )
    }
    public func `getSpendingTxs`() throws -> [TxDetails] {
        return try FfiConverterSequenceTypeTxDetails.lift(
            try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_get_spending_txs(self.pointer, $0
    )
}
        )
    }
    public func `isDrainTxAffordable`(`confirmInBlocks`: UInt32) throws -> Bool {
        return try FfiConverterBool.lift(
            try
    rustCallWithError(FfiConverterTypeLipaError.self) {
    lipabusinesslib_c8c2_Wallet_is_drain_tx_affordable(self.pointer, 
        FfiConverterUInt32.lower(`confirmInBlocks`), $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeWallet: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wallet

    static func read(from buf: Reader) throws -> Wallet {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Wallet, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
        return Wallet(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Wallet) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public struct Balance {
    public var `confirmed`: UInt64
    public var `trustedPending`: UInt64
    public var `untrustedPending`: UInt64
    public var `immature`: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`confirmed`: UInt64, `trustedPending`: UInt64, `untrustedPending`: UInt64, `immature`: UInt64) {
        self.`confirmed` = `confirmed`
        self.`trustedPending` = `trustedPending`
        self.`untrustedPending` = `untrustedPending`
        self.`immature` = `immature`
    }
}


extension Balance: Equatable, Hashable {
    public static func ==(lhs: Balance, rhs: Balance) -> Bool {
        if lhs.`confirmed` != rhs.`confirmed` {
            return false
        }
        if lhs.`trustedPending` != rhs.`trustedPending` {
            return false
        }
        if lhs.`untrustedPending` != rhs.`untrustedPending` {
            return false
        }
        if lhs.`immature` != rhs.`immature` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`confirmed`)
        hasher.combine(`trustedPending`)
        hasher.combine(`untrustedPending`)
        hasher.combine(`immature`)
    }
}


fileprivate struct FfiConverterTypeBalance: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Balance {
        return try Balance(
            `confirmed`: FfiConverterUInt64.read(from: buf), 
            `trustedPending`: FfiConverterUInt64.read(from: buf), 
            `untrustedPending`: FfiConverterUInt64.read(from: buf), 
            `immature`: FfiConverterUInt64.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Balance, into buf: Writer) {
        FfiConverterUInt64.write(value.`confirmed`, into: buf)
        FfiConverterUInt64.write(value.`trustedPending`, into: buf)
        FfiConverterUInt64.write(value.`untrustedPending`, into: buf)
        FfiConverterUInt64.write(value.`immature`, into: buf)
    }
}


public struct Config {
    public var `electrumUrl`: String
    public var `walletDbPath`: String
    public var `network`: Network
    public var `watchDescriptor`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`electrumUrl`: String, `walletDbPath`: String, `network`: Network, `watchDescriptor`: String) {
        self.`electrumUrl` = `electrumUrl`
        self.`walletDbPath` = `walletDbPath`
        self.`network` = `network`
        self.`watchDescriptor` = `watchDescriptor`
    }
}


extension Config: Equatable, Hashable {
    public static func ==(lhs: Config, rhs: Config) -> Bool {
        if lhs.`electrumUrl` != rhs.`electrumUrl` {
            return false
        }
        if lhs.`walletDbPath` != rhs.`walletDbPath` {
            return false
        }
        if lhs.`network` != rhs.`network` {
            return false
        }
        if lhs.`watchDescriptor` != rhs.`watchDescriptor` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`electrumUrl`)
        hasher.combine(`walletDbPath`)
        hasher.combine(`network`)
        hasher.combine(`watchDescriptor`)
    }
}


fileprivate struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Config {
        return try Config(
            `electrumUrl`: FfiConverterString.read(from: buf), 
            `walletDbPath`: FfiConverterString.read(from: buf), 
            `network`: FfiConverterTypeNetwork.read(from: buf), 
            `watchDescriptor`: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Config, into buf: Writer) {
        FfiConverterString.write(value.`electrumUrl`, into: buf)
        FfiConverterString.write(value.`walletDbPath`, into: buf)
        FfiConverterTypeNetwork.write(value.`network`, into: buf)
        FfiConverterString.write(value.`watchDescriptor`, into: buf)
    }
}


public struct Descriptors {
    public var `spendDescriptor`: String
    public var `watchDescriptor`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`spendDescriptor`: String, `watchDescriptor`: String) {
        self.`spendDescriptor` = `spendDescriptor`
        self.`watchDescriptor` = `watchDescriptor`
    }
}


extension Descriptors: Equatable, Hashable {
    public static func ==(lhs: Descriptors, rhs: Descriptors) -> Bool {
        if lhs.`spendDescriptor` != rhs.`spendDescriptor` {
            return false
        }
        if lhs.`watchDescriptor` != rhs.`watchDescriptor` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`spendDescriptor`)
        hasher.combine(`watchDescriptor`)
    }
}


fileprivate struct FfiConverterTypeDescriptors: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Descriptors {
        return try Descriptors(
            `spendDescriptor`: FfiConverterString.read(from: buf), 
            `watchDescriptor`: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Descriptors, into buf: Writer) {
        FfiConverterString.write(value.`spendDescriptor`, into: buf)
        FfiConverterString.write(value.`watchDescriptor`, into: buf)
    }
}


public struct KeyPair {
    public var `secretKey`: String
    public var `publicKey`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`secretKey`: String, `publicKey`: String) {
        self.`secretKey` = `secretKey`
        self.`publicKey` = `publicKey`
    }
}


extension KeyPair: Equatable, Hashable {
    public static func ==(lhs: KeyPair, rhs: KeyPair) -> Bool {
        if lhs.`secretKey` != rhs.`secretKey` {
            return false
        }
        if lhs.`publicKey` != rhs.`publicKey` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`secretKey`)
        hasher.combine(`publicKey`)
    }
}


fileprivate struct FfiConverterTypeKeyPair: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> KeyPair {
        return try KeyPair(
            `secretKey`: FfiConverterString.read(from: buf), 
            `publicKey`: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: KeyPair, into buf: Writer) {
        FfiConverterString.write(value.`secretKey`, into: buf)
        FfiConverterString.write(value.`publicKey`, into: buf)
    }
}


public struct Tx {
    public var `id`: String
    public var `blob`: [UInt8]
    public var `onChainFeeSat`: UInt64
    public var `outputSat`: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`id`: String, `blob`: [UInt8], `onChainFeeSat`: UInt64, `outputSat`: UInt64) {
        self.`id` = `id`
        self.`blob` = `blob`
        self.`onChainFeeSat` = `onChainFeeSat`
        self.`outputSat` = `outputSat`
    }
}


extension Tx: Equatable, Hashable {
    public static func ==(lhs: Tx, rhs: Tx) -> Bool {
        if lhs.`id` != rhs.`id` {
            return false
        }
        if lhs.`blob` != rhs.`blob` {
            return false
        }
        if lhs.`onChainFeeSat` != rhs.`onChainFeeSat` {
            return false
        }
        if lhs.`outputSat` != rhs.`outputSat` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`id`)
        hasher.combine(`blob`)
        hasher.combine(`onChainFeeSat`)
        hasher.combine(`outputSat`)
    }
}


fileprivate struct FfiConverterTypeTx: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Tx {
        return try Tx(
            `id`: FfiConverterString.read(from: buf), 
            `blob`: FfiConverterSequenceUInt8.read(from: buf), 
            `onChainFeeSat`: FfiConverterUInt64.read(from: buf), 
            `outputSat`: FfiConverterUInt64.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Tx, into buf: Writer) {
        FfiConverterString.write(value.`id`, into: buf)
        FfiConverterSequenceUInt8.write(value.`blob`, into: buf)
        FfiConverterUInt64.write(value.`onChainFeeSat`, into: buf)
        FfiConverterUInt64.write(value.`outputSat`, into: buf)
    }
}


public struct TxDetails {
    public var `id`: String
    public var `outputAddress`: String
    public var `outputSat`: UInt64
    public var `onChainFeeSat`: UInt64
    public var `status`: TxStatus

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`id`: String, `outputAddress`: String, `outputSat`: UInt64, `onChainFeeSat`: UInt64, `status`: TxStatus) {
        self.`id` = `id`
        self.`outputAddress` = `outputAddress`
        self.`outputSat` = `outputSat`
        self.`onChainFeeSat` = `onChainFeeSat`
        self.`status` = `status`
    }
}


extension TxDetails: Equatable, Hashable {
    public static func ==(lhs: TxDetails, rhs: TxDetails) -> Bool {
        if lhs.`id` != rhs.`id` {
            return false
        }
        if lhs.`outputAddress` != rhs.`outputAddress` {
            return false
        }
        if lhs.`outputSat` != rhs.`outputSat` {
            return false
        }
        if lhs.`onChainFeeSat` != rhs.`onChainFeeSat` {
            return false
        }
        if lhs.`status` != rhs.`status` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`id`)
        hasher.combine(`outputAddress`)
        hasher.combine(`outputSat`)
        hasher.combine(`onChainFeeSat`)
        hasher.combine(`status`)
    }
}


fileprivate struct FfiConverterTypeTxDetails: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> TxDetails {
        return try TxDetails(
            `id`: FfiConverterString.read(from: buf), 
            `outputAddress`: FfiConverterString.read(from: buf), 
            `outputSat`: FfiConverterUInt64.read(from: buf), 
            `onChainFeeSat`: FfiConverterUInt64.read(from: buf), 
            `status`: FfiConverterTypeTxStatus.read(from: buf)
        )
    }

    fileprivate static func write(_ value: TxDetails, into buf: Writer) {
        FfiConverterString.write(value.`id`, into: buf)
        FfiConverterString.write(value.`outputAddress`, into: buf)
        FfiConverterUInt64.write(value.`outputSat`, into: buf)
        FfiConverterUInt64.write(value.`onChainFeeSat`, into: buf)
        FfiConverterTypeTxStatus.write(value.`status`, into: buf)
    }
}


public struct WalletKeys {
    public var `walletKeypair`: KeyPair
    public var `walletDescriptors`: Descriptors

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`walletKeypair`: KeyPair, `walletDescriptors`: Descriptors) {
        self.`walletKeypair` = `walletKeypair`
        self.`walletDescriptors` = `walletDescriptors`
    }
}


extension WalletKeys: Equatable, Hashable {
    public static func ==(lhs: WalletKeys, rhs: WalletKeys) -> Bool {
        if lhs.`walletKeypair` != rhs.`walletKeypair` {
            return false
        }
        if lhs.`walletDescriptors` != rhs.`walletDescriptors` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`walletKeypair`)
        hasher.combine(`walletDescriptors`)
    }
}


fileprivate struct FfiConverterTypeWalletKeys: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> WalletKeys {
        return try WalletKeys(
            `walletKeypair`: FfiConverterTypeKeyPair.read(from: buf), 
            `walletDescriptors`: FfiConverterTypeDescriptors.read(from: buf)
        )
    }

    fileprivate static func write(_ value: WalletKeys, into buf: Writer) {
        FfiConverterTypeKeyPair.write(value.`walletKeypair`, into: buf)
        FfiConverterTypeDescriptors.write(value.`walletDescriptors`, into: buf)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AddressValidationResult {
    
    case `valid`
    case `invalid`
}

fileprivate struct FfiConverterTypeAddressValidationResult: FfiConverterRustBuffer {
    typealias SwiftType = AddressValidationResult

    static func read(from buf: Reader) throws -> AddressValidationResult {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`valid`
        
        case 2: return .`invalid`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: AddressValidationResult, into buf: Writer) {
        switch value {
        
        
        case .`valid`:
            buf.writeInt(Int32(1))
        
        
        case .`invalid`:
            buf.writeInt(Int32(2))
        
        }
    }
}


extension AddressValidationResult: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LogLevel {
    
    case `error`
    case `warn`
    case `info`
    case `debug`
    case `trace`
}

fileprivate struct FfiConverterTypeLogLevel: FfiConverterRustBuffer {
    typealias SwiftType = LogLevel

    static func read(from buf: Reader) throws -> LogLevel {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`error`
        
        case 2: return .`warn`
        
        case 3: return .`info`
        
        case 4: return .`debug`
        
        case 5: return .`trace`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: LogLevel, into buf: Writer) {
        switch value {
        
        
        case .`error`:
            buf.writeInt(Int32(1))
        
        
        case .`warn`:
            buf.writeInt(Int32(2))
        
        
        case .`info`:
            buf.writeInt(Int32(3))
        
        
        case .`debug`:
            buf.writeInt(Int32(4))
        
        
        case .`trace`:
            buf.writeInt(Int32(5))
        
        }
    }
}


extension LogLevel: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Network {
    
    case `bitcoin`
    case `testnet`
    case `signet`
    case `regtest`
}

fileprivate struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    static func read(from buf: Reader) throws -> Network {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`bitcoin`
        
        case 2: return .`testnet`
        
        case 3: return .`signet`
        
        case 4: return .`regtest`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Network, into buf: Writer) {
        switch value {
        
        
        case .`bitcoin`:
            buf.writeInt(Int32(1))
        
        
        case .`testnet`:
            buf.writeInt(Int32(2))
        
        
        case .`signet`:
            buf.writeInt(Int32(3))
        
        
        case .`regtest`:
            buf.writeInt(Int32(4))
        
        }
    }
}


extension Network: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RuntimeErrorCode {
    
    case `electrumServiceUnavailable`
    case `notEnoughFunds`
    case `remoteServiceUnavailable`
    case `sendToOurselves`
    case `genericError`
}

fileprivate struct FfiConverterTypeRuntimeErrorCode: FfiConverterRustBuffer {
    typealias SwiftType = RuntimeErrorCode

    static func read(from buf: Reader) throws -> RuntimeErrorCode {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`electrumServiceUnavailable`
        
        case 2: return .`notEnoughFunds`
        
        case 3: return .`remoteServiceUnavailable`
        
        case 4: return .`sendToOurselves`
        
        case 5: return .`genericError`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: RuntimeErrorCode, into buf: Writer) {
        switch value {
        
        
        case .`electrumServiceUnavailable`:
            buf.writeInt(Int32(1))
        
        
        case .`notEnoughFunds`:
            buf.writeInt(Int32(2))
        
        
        case .`remoteServiceUnavailable`:
            buf.writeInt(Int32(3))
        
        
        case .`sendToOurselves`:
            buf.writeInt(Int32(4))
        
        
        case .`genericError`:
            buf.writeInt(Int32(5))
        
        }
    }
}


extension RuntimeErrorCode: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TxStatus {
    
    case `notInMempool`
    case `inMempool`
    case `confirmed`(`numberOfBlocks`: UInt32, `confirmedAt`: Date)
}

fileprivate struct FfiConverterTypeTxStatus: FfiConverterRustBuffer {
    typealias SwiftType = TxStatus

    static func read(from buf: Reader) throws -> TxStatus {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`notInMempool`
        
        case 2: return .`inMempool`
        
        case 3: return .`confirmed`(
            `numberOfBlocks`: try FfiConverterUInt32.read(from: buf), 
            `confirmedAt`: try FfiConverterTimestamp.read(from: buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: TxStatus, into buf: Writer) {
        switch value {
        
        
        case .`notInMempool`:
            buf.writeInt(Int32(1))
        
        
        case .`inMempool`:
            buf.writeInt(Int32(2))
        
        
        case let .`confirmed`(`numberOfBlocks`,`confirmedAt`):
            buf.writeInt(Int32(3))
            FfiConverterUInt32.write(`numberOfBlocks`, into: buf)
            FfiConverterTimestamp.write(`confirmedAt`, into: buf)
            
        }
    }
}


extension TxStatus: Equatable, Hashable {}



public enum LipaError {

    
    
    case InvalidInput(`msg`: String)
    case RuntimeError(`code`: RuntimeErrorCode, `msg`: String)
    case PermanentFailure(`msg`: String)
}

fileprivate struct FfiConverterTypeLipaError: FfiConverterRustBuffer {
    typealias SwiftType = LipaError

    static func read(from buf: Reader) throws -> LipaError {
        let variant: Int32 = try buf.readInt()
        switch variant {

        

        
        case 1: return .InvalidInput(
            `msg`: try FfiConverterString.read(from: buf)
            )
        case 2: return .RuntimeError(
            `code`: try FfiConverterTypeRuntimeErrorCode.read(from: buf), 
            `msg`: try FfiConverterString.read(from: buf)
            )
        case 3: return .PermanentFailure(
            `msg`: try FfiConverterString.read(from: buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: LipaError, into buf: Writer) {
        switch value {

        

        
        
        case let .InvalidInput(`msg`):
            buf.writeInt(Int32(1))
            FfiConverterString.write(`msg`, into: buf)
            
        
        case let .RuntimeError(`code`,`msg`):
            buf.writeInt(Int32(2))
            FfiConverterTypeRuntimeErrorCode.write(`code`, into: buf)
            FfiConverterString.write(`msg`, into: buf)
            
        
        case let .PermanentFailure(`msg`):
            buf.writeInt(Int32(3))
            FfiConverterString.write(`msg`, into: buf)
            
        }
    }
}


extension LipaError: Equatable, Hashable {}

extension LipaError: Error { }

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    static func write(_ value: [UInt8], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterUInt8.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [UInt8] {
        let len: Int32 = try buf.readInt()
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    static func write(_ value: [String], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterString.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [String] {
        let len: Int32 = try buf.readInt()
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeTxDetails: FfiConverterRustBuffer {
    typealias SwiftType = [TxDetails]

    static func write(_ value: [TxDetails], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeTxDetails.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [TxDetails] {
        let len: Int32 = try buf.readInt()
        var seq = [TxDetails]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTxDetails.read(from: buf))
        }
        return seq
    }
}

public func `initNativeLoggerOnce`(`minLevel`: LogLevel)  {
    try!
    
    rustCall() {
    
    lipabusinesslib_c8c2_init_native_logger_once(
        FfiConverterTypeLogLevel.lower(`minLevel`), $0)
}
}


public func `generateMnemonic`() throws -> [String] {
    return try FfiConverterSequenceString.lift(
        try
    
    rustCallWithError(FfiConverterTypeLipaError.self) {
    
    lipabusinesslib_c8c2_generate_mnemonic($0)
}
    )
}



public func `deriveKeys`(`network`: Network, `mnemonicString`: [String]) throws -> WalletKeys {
    return try FfiConverterTypeWalletKeys.lift(
        try
    
    rustCallWithError(FfiConverterTypeLipaError.self) {
    
    lipabusinesslib_c8c2_derive_keys(
        FfiConverterTypeNetwork.lower(`network`), 
        FfiConverterSequenceString.lower(`mnemonicString`), $0)
}
    )
}



public func `sign`(`message`: String, `privateKey`: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeLipaError.self) {
    
    lipabusinesslib_c8c2_sign(
        FfiConverterString.lower(`message`), 
        FfiConverterString.lower(`privateKey`), $0)
}
    )
}



public func `generateKeypair`()  -> KeyPair {
    return try! FfiConverterTypeKeyPair.lift(
        try!
    
    rustCall() {
    
    lipabusinesslib_c8c2_generate_keypair($0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum LipabusinesslibLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}